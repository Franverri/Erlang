LINKS:

	- A link is a specific kind of relationship that can be created between two processes. When that relationship is set up and one of the processes dies from an unexpected throw, error or exit, the other linked process also dies.
	
	-This is a useful concept from the perspective of failing as soon as possible to stop errors: if the process that has an error crashes but those that depend on it don't, then all these depending processes now have to deal with a dependency disappearing. Letting them die and then restarting the whole group is usually an acceptable alternative. Links let us do exactly this.

	-Error propagation across processes is done through a process similar to message passing, but with a special type of message called signals. Exit signals are 'secret' messages that automatically act on processes, killing them in the action.

MONITORS:

	- Monitors are what you want when a process wants to know what's going on with a second process, but neither of them really are vital to each other.

	- They are unidirectional.

EXPLICACIÓN PARA C2:

	- In order to restart a process, we need a way to first know that it died. This can be done by adding a layer on top of links with a concept called system processes. System processes are basically normal processes, except they can convert exit signals to regular messages. This is done by calling process_flag(trap_exit, true) in a running process.
	-The problem with our approach is that there is no way to find the Pid of the critic, and thus we can't call him to have his opinion. One of the solutions Erlang has to solve this is to give names to processes. The act of giving a name to a process allows you to replace the unpredictable pid by an atom. This atom can then be used exactly as a Pid when sending messages.
	
SUPERVISORS (ALGUNOS FLAGS - OTROS ESTAN DIRECTO COMENTADOS EN EL CÓDIGO)

	- The supervisors have a built-in mechanism to limit the number of restarts which can occur in a given time interval. This is specified by the two keys intensity and period in the supervisor flags
	- If more than MaxR number of restarts occur in the last MaxT seconds, the supervisor terminates all the child processes and then itself. The termination reason for the supervisor itself in that case will be shutdown.
	- When the supervisor terminates, then the next higher-level supervisor takes some action. It either restarts the terminated supervisor or terminates itself.
	- The intention of the restart mechanism is to prevent a situation where a process repeatedly dies for the same reason, only to be restarted again.
	-The keys intensity and period are optional in the supervisor flags map. If they are not given, they default to 1 and 5, respectively.

NODOS:

	- A node is an executing Erlang runtime system that has been given a name, using the command-line flag -name (long names) or -sname (short names).

	- The format of the node name is an atom name@host. name is the name given by the user. host is the full host name if long names are used, or the first part of the host name if short names are used. node() returns the name of the node.

	!!! A node with a long node name cannot communicate with a node with a short node name.

	- The list of (visible) nodes currently connected to is returned by nodes().

	- SECURITY: Authentication determines which nodes are allowed to communicate with each other. In a network of different Erlang nodes, it is built into the system at the lowest possible level. Each node has its own magic cookie, which is an Erlang atom. When a node tries to connect to another node, the magic cookies are compared. If they do not match, the connected node rejects the connection.

	- For a node Node1 with magic cookie Cookie to be able to connect to, or accept a connection from, another node Node2 with a different cookie DiffCookie, the function erlang:set_cookie(Node2, DiffCookie) must first be called at Node1.